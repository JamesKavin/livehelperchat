{"version":3,"sources":["webpack://LiveHelperChat/./src/util/screenShare.js"],"names":["screenShare","this","params","attributes","chatEvents","isSharing","sharemode","sharehash","cobrowser","intervalRequest","formsEnabled","LHCCoBrowser","encodeURIComponent","location","href","match","startMirroring","listener","data","handleMessage","split","eventEmitter","addListener","addOnceListener","helperFunctions","removeById","storageHandler","removeSessionStorage","th","document","getElementsByTagName","s","createElement","window","substring","protocol","length","setAttribute","LHC_API","args","lhc_base_url","appendChild","removeListener","setSessionStorage","chatParams","getSessionAttributes","makeRequest","focused","confirm","initCoBrowsing","clearInterval","setInterval","TreeMirror","onreadystatechange","onload","startCoBrowse"],"mappings":"obAAA,O,IAyGMA,EAAc,I,WAtGhB,c,4FAAc,SACVC,KAAKC,OAAS,GACdD,KAAKE,WAAa,KAClBF,KAAKG,WAAa,KAElBH,KAAKI,WAAY,EACjBJ,KAAKK,UAAY,OACjBL,KAAKM,UAAY,KACjBN,KAAKO,UAAY,KACjBP,KAAKQ,gBAAkB,K,gDAGbP,GAAQ,WAElB,QAA2B,IAAhBQ,EAA6B,IAAIA,GAAe,EAE3DT,KAAKI,WAAY,EAEjBJ,KAAKO,UAAY,IAAIG,aAAa,CAAC,aAAeD,EAC1C,UAAaT,KAAKM,UAClB,eAAkBL,EAAA,eAClB,cAAiBA,EAAA,cACjB,MAASA,EAAA,MACb,IAAOA,EAAA,IAAc,WAAWD,KAAKM,UAAU,SAASK,mBAAmBC,SAASC,KAAKC,MAAM,kBAAkB,MACrHd,KAAKO,UAAUQ,iBAEf,IAAIC,EAAW,SAACC,GACR,EAAKV,WACL,EAAKA,UAAUW,cAAcD,EAAKE,MAAM,OAIhDnB,KAAKE,WAAWkB,aAAaC,YAAY,qBAAsBL,GAE/DhB,KAAKE,WAAWkB,aAAaE,gBAAgB,uBAAuB,SAACL,GAEjEM,kBAAgBC,WAAW,qBAE3B,EAAKtB,WAAWuB,eAAeC,qBAAqB,mBAEpD,EAAKtB,WAAY,EAEjB,IAAIuB,EAAKC,SAASC,qBAAqB,QAAQ,GAC3CC,EAAIF,SAASG,cAAc,UACTpB,mBAAmBqB,OAAOpB,SAASC,KAAKoB,UAAUD,OAAOpB,SAASsB,SAASC,SACjGL,EAAEM,aAAa,KAAK,kBACpBN,EAAEM,aAAa,OAAO,mBACtBN,EAAEM,aAAa,MAAMC,QAAQC,KAAKC,aAAa,mDAAmD,EAAKjC,WACvGqB,EAAGa,YAAYV,GAEf,EAAKvB,UAAY,KAEjB,EAAKL,WAAWkB,aAAaqB,eAAe,qBAAqBzB,MAGrEhB,KAAKE,WAAWuB,eAAeiB,kBAAkB,kBAAkB,K,gCAG7DzC,EAAQC,EAAYC,GAAY,WACtCH,KAAKC,OAASA,EACdD,KAAKE,WAAaA,EAClBF,KAAKG,WAAaA,EAElB,IAAMwC,EAAa3C,KAAKE,WAAL,YAA+B0C,uBAElD5C,KAAKM,UAAYqC,EAAA,GAAmB,IAAMA,EAAA,KAEpB,GAAlB3C,KAAKI,WACLmB,kBAAgBsB,YAAYR,QAAQC,KAAKC,aAAe,qCAAsC,IAAI,SAACtB,GAC1F,EAAKhB,OAAL,YAAoD,GAAtBgB,EAAA,YAAuD,GAA3B,EAAKf,WAAW4C,SAAmBC,QAAQ,4CACtG,EAAKC,eAAe/B,GACc,GAA3B,EAAKf,WAAW4C,UACvBG,cAAc,EAAKzC,iBACnB,EAAKA,gBAAkB0C,aAAY,WACA,GAA3B,EAAKhD,WAAW4C,UAChBG,cAAc,EAAKzC,iBACfuC,QAAQ,6CACR,EAAKC,eAAe/B,MAG9B,W,qCAMHA,GAAM,WACjB,GAAyB,oBAAdkC,WAA2B,CAClC,IAAIxB,EAAKC,SAASC,qBAAqB,QAAQ,GAC3CC,EAAIF,SAASG,cAAc,UAC/BD,EAAEM,aAAa,OAAQ,mBACvBN,EAAEM,aAAa,MAAOnB,EAAA,WACtBU,EAAGa,YAAYV,GACfA,EAAEsB,mBAAqBtB,EAAEuB,OAAS,WAC9B,EAAKC,cAAcrC,SAGvBjB,KAAKsD,cAAcrC,O,QAMvBlB","file":"95f9fe9aa9b464a53278.js","sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _screenShare {\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n\n        this.isSharing = false;\n        this.sharemode = 'chat';\n        this.sharehash = null;\n        this.cobrowser = null;\n        this.intervalRequest = null;\n    }\n\n    startCoBrowse(params) {\n\n        if (typeof formsEnabled == \"undefined\") var formsEnabled = false;\n\n        this.isSharing = true;\n\n        this.cobrowser = new LHCCoBrowser({'formsenabled':formsEnabled,\n                'chat_hash': this.sharehash,\n                'nodejssettings': params['nodejssettings'],\n                'nodejsenabled': params['nodejsenabled'],\n                'trans': params['trans'],\n            'url': params['url']+'/(hash)/'+this.sharehash+'/?url='+encodeURIComponent(location.href.match(/^(.*\\/)[^\\/]*$/)[1])});\n        this.cobrowser.startMirroring();\n\n        let listener = (data) => {\n            if (this.cobrowser) {\n                this.cobrowser.handleMessage(data.split(':'));\n            }\n        };\n\n        this.attributes.eventEmitter.addListener('screenshareCommand', listener);\n        \n        this.attributes.eventEmitter.addOnceListener('finishScreenSharing', (data) => {\n\n            helperFunctions.removeById('lhc_status_mirror');\n\n            this.attributes.storageHandler.removeSessionStorage('LHC_screenshare');\n\n            this.isSharing = false;\n  \n            var th = document.getElementsByTagName('head')[0];\n            var s = document.createElement('script');\n            var locationCurrent = encodeURIComponent(window.location.href.substring(window.location.protocol.length));\n            s.setAttribute('id','lhc_finish_shr');\n            s.setAttribute('type','text/javascript');\n            s.setAttribute('src',LHC_API.args.lhc_base_url+'/cobrowse/finishsession/(sharemode)/chat/(hash)/'+this.sharehash);\n            th.appendChild(s);\n\n            this.cobrowser = null;\n\n            this.attributes.eventEmitter.removeListener('screenshareCommand',listener);\n        });\n\n        this.attributes.storageHandler.setSessionStorage('LHC_screenshare',1);\n    }\n\n    setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const chatParams = this.attributes['userSession'].getSessionAttributes();\n\n        this.sharehash = chatParams['id'] + '_' + chatParams['hash'];\n\n        if (this.isSharing == false) {\n            helperFunctions.makeRequest(LHC_API.args.lhc_base_url + '/widgetrestapi/screensharesettings', {}, (data) => {\n                if ((this.params['auto_start']) || data['auto_share'] == 1 || (this.attributes.focused == true && confirm('Allow operator to see your page content?'))) {\n                    this.initCoBrowsing(data);\n                } else if (this.attributes.focused == false) {\n                    clearInterval(this.intervalRequest);\n                    this.intervalRequest = setInterval(() => {\n                        if (this.attributes.focused == true) {\n                            clearInterval(this.intervalRequest);\n                            if (confirm('Allow operator to see your page content?')){\n                                this.initCoBrowsing(data);\n                            }\n                        }\n                    },500);\n                }\n            });\n        }\n    }\n\n    initCoBrowsing(data) {\n        if (typeof TreeMirror == \"undefined\") {\n            var th = document.getElementsByTagName('head')[0];\n            var s = document.createElement('script');\n            s.setAttribute('type', 'text/javascript');\n            s.setAttribute('src', data['cobrowser']);\n            th.appendChild(s);\n            s.onreadystatechange = s.onload = () => {\n                this.startCoBrowse(data);\n            };\n        } else {\n            this.startCoBrowse(data);\n        }\n    }\n}\n\nconst screenShare = new _screenShare();\nexport {screenShare};\n\n"],"sourceRoot":""}