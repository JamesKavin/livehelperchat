{"version":3,"sources":["webpack://LiveHelperChat/./src/util/nodeJSChat.js"],"names":["nodeJSChat","this","params","attributes","chatEvents","vid","userSession","getVID","socketOptions","hostname","path","authTokenName","port","parseInt","secure","socket","require","connect","connectSiteVisitor","sampleChannel","subscribe","on","err","console","error","watch","op","eventEmitter","emitEvent","publish","instance_id","status","chanelName","helperFunctions","makeRequest","LHC_API","args","lhc_base_url","ts","Date","getTime","data","emit","hash","log","isAuthenticated","check_messages"],"mappings":"mbAAA,O,IA4FMA,EAAa,I,WAxFf,c,4FAAc,SACVC,KAAKC,OAAS,GACdD,KAAKE,WAAa,KAClBF,KAAKG,WAAa,K,4CAGZF,EAAQC,EAAYC,GAC1BH,KAAKC,OAASA,EACdD,KAAKE,WAAaA,EAClBF,KAAKG,WAAaA,EAElB,IAAMC,EAAMJ,KAAKE,WAAWG,YAAYC,SAEpCC,EAAgB,CAChBC,SAAUP,EAAOO,SACjBC,KAAMR,EAAOQ,KACbC,cAAe,8BAGA,IAAfT,EAAOU,OACPJ,EAAcI,KAAOC,SAASX,EAAOU,OAGpB,GAAjBV,EAAOY,SACPN,EAAcM,QAAS,GAG3B,IAEIC,EAFgBC,EAAQ,IAEDC,QAAQT,GAMnC,SAASU,IACL,IAAIC,EAAgBJ,EAAOK,UAAU,MAAQf,GAE7Cc,EAAcE,GAAG,iBAAiB,SAAUC,GACxCC,QAAQC,MAAM,2DAA6DF,MAG/EH,EAAcM,OAAM,SAAUC,GACb,iBAATA,EAAGA,GACHvB,EAAWwB,aAAaC,UAAU,wBAClB,aAATF,EAAGA,IACVX,EAAOc,QAAQ,OAAOC,EAAY,CAACJ,GAAG,YAAaK,QAAQ,EAAM1B,IAAKA,OAflFU,EAAOM,GAAG,SAAS,SAAUC,GACzBC,QAAQC,MAAMF,MAmBlB,IAAIU,EAAa,MAAQ3B,EACrByB,EAAc7B,KAAKE,WAAW2B,YAElCf,EAAOM,GAAG,kBAAkB,WACxBY,kBAAgBC,YAAY/B,EAAWgC,QAAQC,KAAKC,aAAelC,EAAA,KAAqB,4BAA6B,CAAED,OAAQ,CAACoC,IAAK,IAAIC,MAAQC,aAAa,SAACC,GAC3JX,EAAcW,EAAKX,YACnBf,EAAO2B,KAAK,QAAS,CAACC,KAAMF,EAAKE,KAAMX,WAAYA,EAAYF,YAAaW,EAAKX,cAAc,SAAUR,GACjGA,GACAC,QAAQqB,IAAItB,YAM5BP,EAAOM,GAAG,WAAW,SAAUU,GACvBA,EAAOc,iBACP3B,IAEAf,EAAWgC,QAAQC,KAAKU,gBAAiB,GAEzCb,kBAAgBC,YAAY/B,EAAWgC,QAAQC,KAAKC,aAAelC,EAAA,KAAqB,4BAA6B,CAAED,OAAQ,CAACoC,IAAK,IAAIC,MAAQC,aAAa,SAACC,GAC3JX,EAAcW,EAAKX,YACnBf,EAAO2B,KAAK,QAAS,CAACC,KAAMF,EAAKE,KAAMX,WAAYA,EAAYF,YAAaW,EAAKX,cAAc,SAAUR,GACjGA,EACAC,QAAQqB,IAAItB,IAEZJ,IAEAf,EAAWgC,QAAQC,KAAKU,gBAAiB,gB,QAU7D9C","file":"4c0e5efe7107749a8f7c.js","sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _nodeJSChat {\n\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n    }\n\n    setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const vid = this.attributes.userSession.getVID();\n\n        var socketOptions = {\n            hostname: params.hostname,\n            path: params.path,\n            authTokenName: 'socketCluster.authToken_vi'\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var socketCluster = require(\"socketcluster-client\");\n\n        var socket = socketCluster.connect(socketOptions);\n\n        socket.on('error', function (err) {\n            console.error(err);\n        });\n\n        function connectSiteVisitor(){\n            var sampleChannel = socket.subscribe('uo_' + vid);\n\n            sampleChannel.on('subscribeFail', function (err) {\n                console.error('Failed to subscribe to the sample channel due to error: ' + err);\n            });\n\n            sampleChannel.watch(function (op) {\n                if (op.op == 'check_message') {\n                    attributes.eventEmitter.emitEvent('checkMessageOperator');\n                } else if (op.op == 'is_online') {\n                    socket.publish('ous_'+instance_id,{op:'vi_online', status: true, vid: vid});\n                }\n            });\n        }\n\n        var chanelName = 'uo_' + vid;\n        var instance_id = this.attributes.instance_id;\n\n        socket.on('deauthenticate', function() {\n            helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, (data) => {\n                instance_id = data.instance_id;\n                socket.emit('login', {hash: data.hash, chanelName: chanelName, instance_id: data.instance_id}, function (err) {\n                    if (err) {\n                        console.log(err);\n                    }\n                });\n            })\n        });\n\n        socket.on('connect', function (status) {\n            if (status.isAuthenticated) {\n                connectSiteVisitor();\n                // Disable check messages in case we connect to nodejs\n                attributes.LHC_API.args.check_messages = false;\n            } else {\n                helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, (data) => {\n                    instance_id = data.instance_id;\n                    socket.emit('login', {hash: data.hash, chanelName: chanelName, instance_id: data.instance_id}, function (err) {\n                        if (err) {\n                            console.log(err);\n                        } else {\n                            connectSiteVisitor();\n                            // Disable check messages in case we connect to nodejs\n                            attributes.LHC_API.args.check_messages = false;\n                        }\n                    });\n                })\n            }\n        });\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport {nodeJSChat};\n\n"],"sourceRoot":""}