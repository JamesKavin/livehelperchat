{"version":3,"file":"i18n.k89I4e1N.js","sources":["../../src/i18n/translations.js","../../src/i18n/i18n.js"],"sourcesContent":["let scope = \"lhcbo\";\n\nconst responseTrack = await fetch(WWW_DIR_JAVASCRIPT  + \"restapi/lang/\"+ scope, {\n    method: \"GET\",\n    headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": confLH.csrf_token\n    }\n}).catch((error) => {\n    // Your error is here!\n    console.log('Translations could not be loaded!');\n});\n\nconst data = await responseTrack.json();\n\nexport default data;\n\n/*\nexport async function getTranslations(scope){\n    scope = scope || \"lhcbo\";\n\n    const responseTrack = await fetch(WWW_DIR_JAVASCRIPT  + \"restapi/lang/\"+ scope, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": confLH.csrf_token\n        }\n    }).catch((error) => {\n        // Your error is here!\n        console.log('Translations could not be loaded!');\n    });\n\n    return responseTrack.json();\n}*/\n","import { derived, writable } from \"svelte/store\";\nimport translations from \"./translations\";\n\nexport const locale = writable(\"lhcbo\");\n\nfunction translate(locale, key, vars) {\n    // Let's throw some errors if we're trying to use keys/locales that don't exist.\n    // We could improve this by using Typescript and/or fallback values.\n    if (!key) throw new Error(\"no key provided to $t()\");\n    if (!locale) throw new Error(`no translation for key \"${key}\"`);\n\n    // Grab the translation from the translations object.\n    let text = translations[key];\n\n    if (!text) {\n        console.log(`no translation found for ${key}`);\n        return key;\n    };\n\n    // Replace any passed in variables in the translation string.\n    Object.keys(vars).map((k) => {\n        const regex = new RegExp(`{{${k}}}`, \"g\");\n        text = text.replace(regex, vars[k]);\n    });\n\n    return text;\n}\n\nexport const t = derived(locale, ($locale) => (key, vars = {}) => {\n        return translate($locale, key, vars)\n    }\n);\n\n"],"names":["responseTrack","fetch","WWW_DIR_JAVASCRIPT","method","headers","Accept","confLH","csrf_token","catch","error","console","log","data","json","t","derived","writable","$locale","key","vars","locale","Error","text","translations","Object","keys","map","k","regex","RegExp","replace","translate"],"mappings":"gDAEA,MAAMA,QAAsBC,MAAMC,wCAA8C,CAC5EC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChB,cAAeC,OAAOC,cAE3BC,OAAOC,IAENC,QAAQC,IAAI,oCAAoC,IAG9CC,QAAaZ,EAAca,OCcrB,MAACC,EAAIC,EAzBKC,EAAS,UAyBGC,GAAY,CAACC,EAAKC,EAAO,KAvB3D,SAAmBC,EAAQF,EAAKC,GAG5B,IAAKD,EAAK,MAAM,IAAIG,MAAM,2BAC1B,IAAKD,EAAQ,MAAM,IAAIC,MAAM,2BAA2BH,MAGxD,IAAII,EAAOC,EAAaL,GAExB,OAAKI,GAMLE,OAAOC,KAAKN,GAAMO,KAAKC,IACnB,MAAMC,EAAQ,IAAIC,OAAO,KAAKF,MAAO,KACrCL,EAAOA,EAAKQ,QAAQF,EAAOT,EAAKQ,GAAG,IAGhCL,IAVHZ,QAAQC,IAAI,4BAA4BO,KACjCA,EAUf,CAGea,CAAUd,EAASC,EAAKC"}