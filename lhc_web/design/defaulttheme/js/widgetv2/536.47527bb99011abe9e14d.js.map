{"version":3,"file":"536.47527bb99011abe9e14d.js","mappings":"uUAYMA,GANLC,EAAAA,EAAAA,KAAQ,SAACC,GACN,MAAO,CACHC,WAAYD,EAAMC,cAFlB,e,6aAYJ,WAAYC,GAAO,yBACf,cAAMA,GADS,mBAJX,CACJC,gBAAiB,IAGF,E,6CAQnB,c,kCA4CA,c,4BAcA,SAAeC,M,4BAMf,c,oBAcA,WAAS,WAEDC,EAAU,EAKd,OAFAC,QAAQC,IAAIC,KAAKN,MAAMO,eAGnB,4BACKC,EAAAA,EAAAA,YAAWF,KAAKN,MAAMO,cAAc,CACjCE,QAAS,SAAAC,GACL,GAAKA,EAAQC,SAGQ,eAAjBD,EAAQE,KAAuB,CAC/B,IAAIC,EAAgB,EAAKC,MAAMb,iBAAmBE,EAAU,SAAW,GAEvE,OADAA,IACO,6BAASO,EAAQC,QAAjB,CAA0BI,UAAWF,KACnCL,EAAAA,EAAAA,YAAWE,EAAQM,oB,EApHhD,CAMmBC,EAAAA,aAAAA,EAwH3B","sources":["webpack://LHCReactAPP/./src/components/InlineSurvey.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { hideInvitation } from \"../actions/chatActions\"\nimport { helperFunctions } from \"../lib/helperFunctions\";\nimport parse, { domToReact } from 'html-react-parser';\n\n@connect((store) => {\n    return {\n        chatwidget: store.chatwidget\n    };\n})\n\nclass InlineSurvey extends Component {\n\n    state = {\n        currentQuestion: 0\n    }\n\n    constructor(props) {\n        super(props);\n        /*this.hideInvitation = this.hideInvitation.bind(this);\n        this.fullInvitation = this.fullInvitation.bind(this);\n        this.setBotPayload = this.setBotPayload.bind(this);\n        this.expireTimeout = null;*/\n    }\n\n    componentDidMount() {\n        /*helperFunctions.sendMessageParent('showInvitation', [{name: this.props.chatwidget.getIn(['proactive','data','invitation_name'])}]);\n\n        if (this.props.chatwidget.getIn(['proactive','data','play_sound'])) {\n            helperFunctions.emitEvent('play_sound', [{'type' : 'new_invitation', 'sound_on' : (this.props.chatwidget.getIn(['proactive','data','play_sound']) === true), 'widget_open' : ((this.props.chatwidget.get('shown') && this.props.chatwidget.get('mode') == 'widget') || document.hasFocus())}]);\n        }\n\n        if (!(this.props.chatwidget.hasIn(['proactive','data','full_widget']) && !this.props.chatwidget.get('isMobile'))) {\n            if (document.getElementById('id-invitation-height')) {\n                setTimeout(()=> {\n                    if (document.getElementById('id-invitation-height')) {\n                        var heightSet = document.getElementById('id-invitation-height').offsetHeight + 20;\n                        helperFunctions.sendMessageParent('hideAction', []);\n                        helperFunctions.sendMessageParent('widgetHeight', [{\n                            'force_width' : (this.props.chatwidget.hasIn(['proactive','data','message_width']) ? this.props.chatwidget.getIn(['proactive','data','message_width']) + 40 : 240),\n                            'force_height' : heightSet,\n                            'force_bottom' : (this.props.chatwidget.hasIn(['proactive','data','message_bottom']) ? this.props.chatwidget.getIn(['proactive','data','message_bottom']) : 75),\n                            'force_right' : (this.props.chatwidget.hasIn(['proactive','data','message_right']) ? this.props.chatwidget.getIn(['proactive','data','message_right']) : 75),\n                        }]);\n                        setTimeout(() => {\n                            helperFunctions.sendMessageParent('showAction', []);\n                            this.setState({shown : true});\n                        },100);\n                    }\n                }, 50);\n            }\n        }\n\n        if (this.props.chatwidget.hasIn(['proactive','data','inv_expires'])) {\n            this.expireTimeout = setTimeout(() => {\n                this.props.dispatch(hideInvitation(true));\n            },this.props.chatwidget.getIn(['proactive','data','inv_expires'])*1000);\n        }\n\n        if (this.props.chatwidget.hasIn(['proactive','data','on_click'])) {\n            this.appendScript(this.props.chatwidget.getIn(['proactive','data','on_click','src']), this.props.chatwidget.getIn(['proactive','data','on_click','id']));\n        }\n\n        if (this.props.chatwidget.hasIn(['proactive','data','site_css'])) {\n            this.appendCSS(this.props.chatwidget.getIn(['proactive','data','site_css']), this.props.chatwidget.getIn(['proactive','data','site_css_id']));\n        }*/\n    }\n\n\n    componentWillUnmount() {\n        /*clearTimeout(this.expireTimeout);\n        helperFunctions.sendMessageParent('widgetHeight', [{'reset_height' : true}]);\n        if (this.props.chatwidget.hasIn(['proactive','data','on_click'])) {\n            var EObj = null;\n            (EObj = document.getElementById(this.props.chatwidget.getIn(['proactive','data','on_click','id']))) ? EObj.parentNode.removeChild(EObj) : false;\n        }\n\n        if (this.props.chatwidget.hasIn(['proactive','data','site_css_id'])) {\n            var EObj = null;\n            (EObj = document.getElementById(this.props.chatwidget.getIn(['proactive','data','site_css_id']))) ? EObj.parentNode.removeChild(EObj) : false;\n        }*/\n    }\n\n    hideInvitation(e) {\n        /*this.props.dispatch(hideInvitation( this.props.chatwidget.hasIn(['proactive','data','hide_on_open']) ));\n        e.preventDefault();\n        e.stopPropagation();*/\n    }\n\n    fullInvitation() {\n        /*if (this.props.chatwidget.hasIn(['proactive','data','hide_on_open'])){\n            this.props.dispatch(hideInvitation(true, true));\n            if (this.props.chatwidget.hasIn(['proactive','data','on_click'])) {\n                window['callback_'+this.props.chatwidget.getIn(['proactive','data','on_click','id'])]();\n            }\n        } else {\n            helperFunctions.sendMessageParentDirect('hideInvitation', [{'full' : true, name: this.props.chatwidget.getIn(['proactive','data','invitation_name'])}]);\n            this.props.dispatch({\n                'type' : 'FULL_INVITATION'\n            });\n        }*/\n    }\n\n    render() {\n\n        var counter = 0;\n        var totalQuestions = 0;\n\n        console.log(this.props.surveyOptions);\n\n        return (\n            <div>\n                {domToReact(this.props.surveyOptions,{\n                    replace: domNode => {\n                        if (!domNode.attribs) {\n                            return;\n                        }\n                        if (domNode.name === 'voteoption') {\n                            let classNameItem = this.state.currentQuestion != counter ? 'd-none' : '';\n                            counter++;\n                            return <div {...domNode.attribs} className={classNameItem} >\n                                    {domToReact(domNode.children)}\n                            </div>;\n                        }\n                    }\n                })}\n            </div>\n        );\n    }\n}\n\nexport default InlineSurvey;\n"],"names":["InlineSurvey","connect","store","chatwidget","props","currentQuestion","e","counter","console","log","this","surveyOptions","domToReact","replace","domNode","attribs","name","classNameItem","state","className","children","Component"],"sourceRoot":""}