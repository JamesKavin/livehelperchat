{"version":3,"file":"261.09fe3b69d615ad1e5aa1.js","mappings":"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","sources":["webpack://LHCReactAPP/./src/extensions/nodejs/nodeJSChat.js"],"sourcesContent":["import { helperFunctions } from \"../../lib/helperFunctions\";\nimport { fetchMessages, checkChatStatus, updateMessage } from \"../../actions/chatActions\"\n\nclass _nodeJSChat {\n    constructor() {\n        this.socket = null;\n\n        // On chat close event close connection\n        helperFunctions.eventEmitter.addListener('endedChat', () => {\n            if (this.socket !== null) {\n                this.socket.destroy();\n            }\n        });\n    }\n\n    async bootstrap(params, dispatch, getState) {\n\n        const state = getState();\n        const chatId = state.chatwidget.getIn(['chatData','id']);\n        const chatHash = state.chatwidget.getIn(['chatData','hash']);\n        const syncDefault = state.chatwidget.getIn(['chat_ui','sync_interval']);\n\n        var socketOptions = {\n            hostname: params.hostname,\n            path: params.path,\n            autoReconnectOptions: {initialDelay: 5000, randomness: 5000}\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var chanelName;\n\n        if (params.instance_id > 0) {\n            chanelName = ('chat_'+params.instance_id+'_'+chatId);\n        } else{\n            chanelName = ('chat_'+chatId);\n        }\n\n        var socketCluster = require('socketcluster-client');\n\n        var socket = this.socket = socketCluster.create(socketOptions);\n        \n        var sampleChannel = null;\n\n\n        let status = await socket.listener('connect').once();\n        if (status.isAuthenticated) {\n            connectVisitor();\n        } else {\n            authentificate();\n        }\n\n        function authentificate() {\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then(async (response) => {\n                await Promise.all([\n                    socket.invoke('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }),\n                    socket.listener('authenticate').once()\n                ]);\n                connectVisitor();\n            });\n        }\n\n        /*socket.on('error', function (err) {\n            console.error(err);\n        });*/\n\n       function visitorTypingListener(data)\n       {\n           console.log('typing listener');\n            if (data.status == true){\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':data.msg});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vt','msg':data.msg});\n                }\n            } else {\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vts'});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vts'});\n                }\n            }\n       }\n\n       function messageSend(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId, {'op':'vt','msg':'✉️ ' + data.msg});\n            } else {\n                socket.transmitPublish('chat_'+chatId,{'op':'vt', 'msg':'✉️ ' + data.msg});\n            }\n        }\n\n       function messageSendError(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            } else {\n                socket.transmitPublish('chat_'+chatId, {'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            }\n        }\n\n        function disconnect() {\n            if (sampleChannel !== null) {\n                try {\n                    sampleChannel.destroy();\n                } catch (e) {\n\n                }\n            }\n\n            helperFunctions.eventEmitter.removeListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.removeListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.removeListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: syncDefault}\n            });\n\n            dispatch({\n                'type': 'CHAT_REMOVE_OVERRIDE',\n                'data': \"typing\"\n            });\n        }\n\n        /*socket.on('close', function() {\n            disconnect();\n        });*/\n\n        async function connectVisitor() {\n\n            var firstRun = sampleChannel == null;\n\n            if (params.instance_id > 0) {\n                sampleChannel = socket.subscribe('chat_'+params.instance_id+'_'+chatId);\n            } else {\n                sampleChannel = socket.subscribe('chat_' + chatId);\n            }\n\n            /*sampleChannel.on('subscribeFail', function (err) {\n                console.error('Failed to subscribe to the sample channel due to error: ' + err);\n            });*/\n\n            //sampleChannel.on('subscribe', function () {\n                socket.transmitPublish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+chatId : 'chat_'+chatId), {'op':'vi_online', status: true});\n            //});\n\n            helperFunctions.eventEmitter.addListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.addListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.addListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: 10000}\n            });\n\n            dispatch({\n                'type': 'CHAT_ADD_OVERRIDE',\n                'data': \"typing\"\n            });\n\n            if (firstRun == true)\n            {\n                for await (let op of sampleChannel) {\n                    if (op.op == 'ot') { // Operator Typing Message\n                        if (op.data.status == true) {\n                            dispatch({\n                                'type': 'chat_status_changed',\n                                'data': {text: op.data.ttx}\n                            });\n                        } else {\n                            dispatch({\n                                'type': 'chat_status_changed',\n                                'data': {text: ''}\n                            });\n                        }\n                    } else if (op.op == 'cmsg' || op.op == 'schange') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])){\n                            dispatch(fetchMessages({\n                                'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                'lmgsid' : state.chatwidget.getIn(['chatLiveData','lmsgid']),\n                                'theme' : state.chatwidget.get('theme')\n                            }));\n                        }\n                    } else if (op.op == 'umsg') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])) {\n                            updateMessage({'msg_id' :  op.msid,'id' : state.chatwidget.getIn(['chatData','id']), 'hash' : state.chatwidget.getIn(['chatData','hash'])})(dispatch, getState);\n                        }\n                    } else if (op.op == 'schange' || op.op == 'cclose') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])){\n                            dispatch(checkChatStatus({\n                                'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                'mode' : state.chatwidget.get('mode'),\n                                'theme' : state.chatwidget.get('theme')\n                            }));\n                        }\n                    } else if (op.op == 'vo') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])) {\n                            socket.transmitPublish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+state.chatwidget.getIn(['chatData','id']) : 'chat_'+state.chatwidget.getIn(['chatData','id'])) ,{'op':'vi_online', status: true});\n                        }\n                    }\n                }\n            }\n\n\n\n        }\n\n        /*socket.on('deauthenticate', function(){\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then((response) => {\n                socket.emit('login', {hash:response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }, function (err) {\n                    if (err) {\n                        console.log(err);\n                        disconnect();\n                    }\n                });\n            });\n        });*/\n\n        for await (let event of socket.listener('deauthenticate')) {\n            authentificate();\n        }\n\n        /*socket.on('connect', function (status) {\n            if (status.isAuthenticated && chatId > 0) {\n                connectVisitor();\n            } else {\n                const state = getState();\n                let chat_id = state.chatwidget.getIn(['chatData','id']);\n                window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then((response) => {\n                    socket.emit('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }, function (err) {\n                        if (err) {\n                            console.log(err);\n                            socket.destroy();\n                        } else {\n                            connectVisitor();\n                        }\n                    });\n                });\n            }\n        });*/\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport { nodeJSChat };"],"names":["nodeJSChat","_nodeJSChat","this","socket","helperFunctions","destroy","params","dispatch","getState","authentificate","visitorTypingListener","messageSend","messageSendError","connectVisitor","firstRun","sampleChannel","instance_id","subscribe","chatId","transmitPublish","status","sync_interval","op","data","text","ttx","state","chatwidget","hasIn","fetchMessages","getIn","get","updateMessage","msid","checkChatStatus","msg","console","log","chat_id","window","lhcAxios","post","lhcChat","headers","then","response","Promise","all","invoke","hash","chanelName","listener","once","socketOptions","hostname","path","autoReconnectOptions","initialDelay","randomness","port","parseInt","secure","socketCluster","require","create","isAuthenticated"],"sourceRoot":""}