{"version":3,"file":"261.3c554d076b9002bf8cec.js","mappings":"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","sources":["webpack://LHCReactAPP/./src/extensions/nodejs/nodeJSChat.js"],"sourcesContent":["import { helperFunctions } from \"../../lib/helperFunctions\";\nimport { fetchMessages, checkChatStatus, updateMessage } from \"../../actions/chatActions\"\n\nclass _nodeJSChat {\n    constructor() {\n        this.socket = null;\n\n        // On chat close event close connection\n        helperFunctions.eventEmitter.addListener('endedChat', () => {\n            if (this.socket !== null) {\n                this.socket.disconnect();\n            }\n        });\n    }\n\n    bootstrap(params, dispatch, getState) {\n\n        console.log('connect');\n\n        const state = getState();\n        const chatId = state.chatwidget.getIn(['chatData','id']);\n        const chatHash = state.chatwidget.getIn(['chatData','hash']);\n        const syncDefault = state.chatwidget.getIn(['chat_ui','sync_interval']);\n\n        var socketOptions = {\n            hostname: params.hostname,\n            path: params.path,\n            autoReconnectOptions: {initialDelay: 5000, randomness: 5000}\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var chanelName;\n\n        if (params.instance_id > 0) {\n            chanelName = ('chat_'+params.instance_id+'_'+chatId);\n        } else{\n            chanelName = ('chat_'+chatId);\n        }\n\n        var socketCluster = require('socketcluster-client');\n\n        var socket = this.socket = socketCluster.create(socketOptions);\n        \n        var sampleChannel = null;\n\n        (async () => {\n            for await (let status of socket.listener('connect')) {\n                if (status.isAuthenticated) {\n                    connectVisitor();\n                } else {\n                    authentificate();\n                }\n            }\n        })();\n\n        function authentificate() {\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then(async (response) => {\n                await Promise.all([\n                    socket.invoke('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }),\n                    socket.listener('authenticate').once()\n                ]);\n                connectVisitor();\n            });\n        }\n\n       function visitorTypingListener(data)\n       {\n           console.log('typing listener');\n            if (data.status == true){\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':data.msg});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vt','msg':data.msg});\n                }\n            } else {\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vts'});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vts'});\n                }\n            }\n       }\n\n       function messageSend(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId, {'op':'vt','msg':'✉️ ' + data.msg});\n            } else {\n                socket.transmitPublish('chat_'+chatId,{'op':'vt', 'msg':'✉️ ' + data.msg});\n            }\n        }\n\n       function messageSendError(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            } else {\n                socket.transmitPublish('chat_'+chatId, {'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            }\n        }\n\n        function disconnect() {\n\n            if (sampleChannel !== null) {\n                try {\n                    sampleChannel.unsubscribe();\n                    console.log('channel destroy success');\n                } catch (e) {\n                    console.log(e);\n                }\n            }\n\n            helperFunctions.eventEmitter.removeListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.removeListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.removeListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: syncDefault}\n            });\n\n            dispatch({\n                'type': 'CHAT_REMOVE_OVERRIDE',\n                'data': \"typing\"\n            });\n        }\n\n        (async () => {\n            for await (let event of socket.listener('disconnect')) {\n                console.log('disconnect');\n                disconnect();\n            }\n        })();\n\n        async function connectVisitor() {\n\n            console.log(sampleChannel);\n\n            var firstRun = sampleChannel == null;\n\n            if (params.instance_id > 0) {\n                sampleChannel = socket.subscribe('chat_'+params.instance_id+'_'+chatId);\n            } else {\n                sampleChannel = socket.subscribe('chat_' + chatId);\n            }\n\n            (async () => {\n                await sampleChannel.listener('subscribe').once();\n                socket.transmitPublish((params.instance_id > 0 ? 'chat_' + params.instance_id + '_' + chatId : 'chat_' + chatId), {\n                    'op': 'vi_online',\n                    status: true\n                });\n            })();\n\n            helperFunctions.eventEmitter.addListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.addListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.addListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: 10000}\n            });\n\n            dispatch({\n                'type': 'CHAT_ADD_OVERRIDE',\n                'data': \"typing\"\n            });\n\n            if (firstRun == true)\n            {\n                for await (let op of sampleChannel) {\n                    if (op.op == 'ot') { // Operator Typing Message\n                        if (op.data.status == true) {\n                            dispatch({\n                                'type': 'chat_status_changed',\n                                'data': {text: op.data.ttx}\n                            });\n                        } else {\n                            dispatch({\n                                'type': 'chat_status_changed',\n                                'data': {text: ''}\n                            });\n                        }\n                    } else if (op.op == 'cmsg' || op.op == 'schange') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])){\n                            dispatch(fetchMessages({\n                                'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                'lmgsid' : state.chatwidget.getIn(['chatLiveData','lmsgid']),\n                                'theme' : state.chatwidget.get('theme')\n                            }));\n                        }\n                    } else if (op.op == 'umsg') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])) {\n                            updateMessage({'msg_id' :  op.msid,'id' : state.chatwidget.getIn(['chatData','id']), 'hash' : state.chatwidget.getIn(['chatData','hash'])})(dispatch, getState);\n                        }\n                    } else if (op.op == 'schange' || op.op == 'cclose') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])){\n                            dispatch(checkChatStatus({\n                                'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                'mode' : state.chatwidget.get('mode'),\n                                'theme' : state.chatwidget.get('theme')\n                            }));\n                        }\n                    } else if (op.op == 'vo') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])) {\n                            socket.transmitPublish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+state.chatwidget.getIn(['chatData','id']) : 'chat_'+state.chatwidget.getIn(['chatData','id'])) ,{'op':'vi_online', status: true});\n                        }\n                    }\n                }\n            }\n       }\n\n        /*socket.on('deauthenticate', function(){\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then((response) => {\n                socket.emit('login', {hash:response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }, function (err) {\n                    if (err) {\n                        console.log(err);\n                        disconnect();\n                    }\n                });\n            });\n        });*/\n\n        (async () => {\n            for await (let event of socket.listener('deauthenticate')) {\n                authentificate();\n            }\n        })();\n\n        /*socket.on('connect', function (status) {\n            if (status.isAuthenticated && chatId > 0) {\n                connectVisitor();\n            } else {\n                const state = getState();\n                let chat_id = state.chatwidget.getIn(['chatData','id']);\n                window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then((response) => {\n                    socket.emit('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }, function (err) {\n                        if (err) {\n                            console.log(err);\n                            socket.destroy();\n                        } else {\n                            connectVisitor();\n                        }\n                    });\n                });\n            }\n        });*/\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport { nodeJSChat };"],"names":["nodeJSChat","_nodeJSChat","this","socket","helperFunctions","disconnect","params","dispatch","getState","console","log","state","chatId","chatwidget","getIn","syncDefault","socketOptions","hostname","path","autoReconnectOptions","initialDelay","randomness","port","parseInt","secure","instance_id","socketCluster","require","create","sampleChannel","authentificate","chat_id","window","lhcAxios","post","lhcChat","headers","then","response","Promise","all","invoke","hash","data","chanelName","listener","once","connectVisitor","visitorTypingListener","status","transmitPublish","msg","messageSend","messageSendError","unsubscribe","e","sync_interval","firstRun","subscribe","op","text","ttx","hasIn","fetchMessages","get","updateMessage","msid","checkChatStatus","isAuthenticated"],"sourceRoot":""}