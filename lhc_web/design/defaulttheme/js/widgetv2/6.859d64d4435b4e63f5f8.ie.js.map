{"version":3,"sources":["webpack://LHCReactAPP/./src/extensions/nodejs/nodeJSChat.js"],"names":["nodeJSChat","this","socket","helperFunctions","eventEmitter","addListener","destroy","params","dispatch","getState","state","chatId","chatwidget","getIn","syncDefault","socketOptions","hostname","path","port","parseInt","secure","instance_id","socketCluster","require","connect","sampleChannel","visitorTypingListener","data","status","publish","msg","messageSend","messageSendError","connectVisitor","subscribe","on","err","console","error","watch","op","text","ttx","hasIn","fetchMessages","get","checkChatStatus","sync_interval","removeListener","chat_id","window","lhcAxios","post","lhcChat","headers","then","response","emit","hash","chanelName","log","isAuthenticated"],"mappings":"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","file":"6.859d64d4435b4e63f5f8.ie.js","sourcesContent":["import { helperFunctions } from \"../../lib/helperFunctions\";\nimport { fetchMessages, checkChatStatus } from \"../../actions/chatActions\"\n\nclass _nodeJSChat {\n    constructor() {\n        this.socket = null;\n\n        // On chat close event close connection\n        helperFunctions.eventEmitter.addListener('endedChat', () => {\n            if (this.socket !== null) {\n                this.socket.destroy();\n            }\n        });\n    }\n\n    bootstrap(params, dispatch, getState) {\n\n        const state = getState();\n        const chatId = state.chatwidget.getIn(['chatData','id']);\n        const chatHash = state.chatwidget.getIn(['chatData','hash']);\n        const syncDefault = state.chatwidget.getIn(['chat_ui','sync_interval']);\n\n        var socketOptions = {\n            hostname: params.hostname,\n            path: params.path\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var chanelName;\n\n        if (params.instance_id > 0) {\n            chanelName = ('chat_'+params.instance_id+'_'+chatId);\n        } else{\n            chanelName = ('chat_'+chatId);\n        }\n\n        var socketCluster = require('socketcluster-client');\n\n        var socket = this.socket = socketCluster.connect(socketOptions);\n        \n        var sampleChannel = null;\n        \n        socket.on('error', function (err) {\n            console.error(err);\n        });\n\n       function visitorTypingListener(data)\n       {\n            if (data.status == true){\n                if (params.instance_id > 0) {\n                    socket.publish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':data.msg});\n                } else {\n                    socket.publish('chat_'+chatId,{'op':'vt','msg':data.msg});\n                }\n            } else {\n                if (params.instance_id > 0) {\n                    socket.publish('chat_'+params.instance_id+'_'+chatId,{'op':'vts'});\n                } else {\n                    socket.publish('chat_'+chatId,{'op':'vts'});\n                }\n            }\n       }\n\n       function messageSend(data)\n       {\n            if (params.instance_id > 0) {\n                socket.publish('chat_'+params.instance_id+'_'+chatId, {'op':'vt','msg':'✉️ ' + data.msg});\n            } else {\n                socket.publish('chat_'+chatId,{'op':'vt', 'msg':'✉️ ' + data.msg});\n            }\n        }\n\n       function messageSendError(data)\n       {\n            if (params.instance_id > 0) {\n                socket.publish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            } else {\n                socket.publish('chat_'+chatId, {'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            }\n        }\n\n        socket.on('close', function() {\n\n            if (sampleChannel !== null) {\n                sampleChannel.destroy();\n            }\n\n            helperFunctions.eventEmitter.removeListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.removeListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.removeListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: syncDefault}\n            });\n\n            dispatch({\n                'type': 'CHAT_REMOVE_OVERRIDE',\n                'data': \"typing\"\n            });\n\n        });\n\n        function connectVisitor(){\n            if (params.instance_id > 0) {\n                sampleChannel = socket.subscribe('chat_'+params.instance_id+'_'+chatId);\n            } else {\n                sampleChannel = socket.subscribe('chat_' + chatId);\n            }\n\n            sampleChannel.on('subscribeFail', function (err) {\n                console.error('Failed to subscribe to the sample channel due to error: ' + err);\n            });\n\n            sampleChannel.on('subscribe', function () {\n                socket.publish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+chatId : 'chat_'+chatId), {'op':'vi_online', status: true});\n            });\n\n            sampleChannel.watch(function (op) {\n                if (op.op == 'ot') { // Operator Typing Message\n                    if (op.data.status == true) {\n                        dispatch({\n                            'type': 'chat_status_changed',\n                            'data': {text: op.data.ttx}\n                        });\n                    } else {\n                        dispatch({\n                            'type': 'chat_status_changed',\n                            'data': {text: ''}\n                        });\n                    }\n                } else if (op.op == 'cmsg' || op.op == 'schange') {\n                    const state = getState();\n                    if (state.chatwidget.hasIn(['chatData','id'])){\n                        dispatch(fetchMessages({\n                            'chat_id': state.chatwidget.getIn(['chatData','id']),\n                            'hash' : state.chatwidget.getIn(['chatData','hash']),\n                            'lmgsid' : state.chatwidget.getIn(['chatLiveData','lmsgid']),\n                            'theme' : state.chatwidget.get('theme')\n                        }));\n                    }\n                } else if (op.op == 'schange') {\n                    const state = getState();\n                    if (state.chatwidget.hasIn(['chatData','id'])){\n                        dispatch(checkChatStatus({\n                            'chat_id': state.chatwidget.getIn(['chatData','id']),\n                            'hash' : state.chatwidget.getIn(['chatData','hash']),\n                            'mode' : state.chatwidget.get('mode'),\n                            'theme' : state.chatwidget.get('theme')\n                        }));\n                    }\n                } else if (op.op == 'vo') {\n                    const state = getState();\n                    if (state.chatwidget.hasIn(['chatData','id'])) {\n                        socket.publish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+state.chatwidget.getIn(['chatData','id']) : 'chat_'+state.chatwidget.getIn(['chatData','id'])) ,{'op':'vi_online', status: true});\n                    }\n                }\n            });\n\n            helperFunctions.eventEmitter.addListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.addListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.addListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: 10000}\n            });\n\n            dispatch({\n                'type': 'CHAT_ADD_OVERRIDE',\n                'data': \"typing\"\n            });\n        }\n\n        socket.on('deauthenticate', function(){\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then((response) => {\n                socket.emit('login', {hash:response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }, function (err) {\n                    if (err) {\n                        console.log(err);\n                        socket.destroy();\n                    }\n                });\n            });\n        });\n\n        socket.on('connect', function (status) {\n            if (status.isAuthenticated && chatId > 0) {\n                connectVisitor();\n            } else {\n                const state = getState();\n                let chat_id = state.chatwidget.getIn(['chatData','id']);\n                window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then((response) => {\n                    socket.emit('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }, function (err) {\n                        if (err) {\n                            console.log(err);\n                            socket.destroy();\n                        } else {\n                            connectVisitor();\n                        }\n                    });\n                });\n            }\n        });\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport { nodeJSChat };"],"sourceRoot":""}