{"version":3,"file":"261.c48291f92b14ec579b1c.js","mappings":"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","sources":["webpack://LHCReactAPP/./src/extensions/nodejs/nodeJSChat.js"],"sourcesContent":["import { helperFunctions } from \"../../lib/helperFunctions\";\nimport { fetchMessages, checkChatStatus, updateMessage } from \"../../actions/chatActions\"\n\nclass _nodeJSChat {\n    constructor() {\n        this.socket = null;\n\n        // On chat close event close connection\n        helperFunctions.eventEmitter.addListener('endedChat', () => {\n            if (this.socket !== null) {\n                this.socket.disconnect();\n            }\n        });\n    }\n\n    bootstrap(params, dispatch, getState) {\n\n        const state = getState();\n        const chatId = state.chatwidget.getIn(['chatData','id']);\n        const chatHash = state.chatwidget.getIn(['chatData','hash']);\n        const syncDefault = state.chatwidget.getIn(['chat_ui','sync_interval']);\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            autoReconnectOptions: {initialDelay: 5000, randomness: 5000}\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var chanelName;\n\n        if (params.instance_id > 0) {\n            chanelName = ('chat_'+params.instance_id+'_'+chatId);\n        } else{\n            chanelName = ('chat_'+chatId);\n        }\n\n        var socketCluster = require('socketcluster-client');\n\n        var socket = this.socket = socketCluster.create(socketOptions);\n        \n        var sampleChannel = null;\n\n        (async () => {\n            for await (let status of socket.listener('connect')) {\n                if (status.isAuthenticated && chatId > 0) {\n                    connectVisitor();\n                } else {\n                    authentificate();\n                }\n            }\n        })();\n\n        function authentificate() {\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then(async (response) => {\n                await Promise.all([\n                    socket.invoke('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }),\n                    socket.listener('authenticate').once()\n                ]);\n                connectVisitor();\n            });\n        }\n\n       function visitorTypingListener(data)\n       {\n            if (data.status == true){\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':data.msg});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vt','msg':data.msg});\n                }\n            } else {\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vts'});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vts'});\n                }\n            }\n       }\n\n       function messageSend(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId, {'op':'vt','msg':'✉️ ' + data.msg});\n            } else {\n                socket.transmitPublish('chat_'+chatId,{'op':'vt', 'msg':'✉️ ' + data.msg});\n            }\n        }\n\n       function messageSendError(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            } else {\n                socket.transmitPublish('chat_'+chatId, {'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            }\n        }\n\n        function disconnect() {\n\n            if (sampleChannel !== null) {\n                try {\n                    sampleChannel.unsubscribe();\n                } catch (e) {\n\n                }\n            }\n\n            helperFunctions.eventEmitter.removeListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.removeListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.removeListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: syncDefault}\n            });\n\n            dispatch({\n                'type': 'CHAT_REMOVE_OVERRIDE',\n                'data': \"typing\"\n            });\n        }\n\n        (async () => {\n            for await (let event of socket.listener('disconnect')) {\n                disconnect();\n            }\n        })();\n\n        function connectVisitor() {\n\n            var firstRun = sampleChannel == null;\n\n            if (params.instance_id > 0) {\n                sampleChannel = socket.subscribe('chat_'+params.instance_id+'_'+chatId);\n            } else {\n                sampleChannel = socket.subscribe('chat_' + chatId);\n            }\n\n            helperFunctions.eventEmitter.addListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.addListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.addListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: 10000}\n            });\n\n            dispatch({\n                'type': 'CHAT_ADD_OVERRIDE',\n                'data': \"typing\"\n            });\n\n            if (firstRun == true)\n            {\n                (async () => {\n                    for await (let event of sampleChannel.listener('subscribe')) {\n                        socket.transmitPublish((params.instance_id > 0 ? 'chat_' + params.instance_id + '_' + chatId : 'chat_' + chatId), {\n                            'op': 'vi_online',\n                            status: true\n                        });\n                    }\n                })();\n                (async () => {\n                    for await (let op of sampleChannel) {\n                    if (op.op == 'ot') { // Operator Typing Message\n                        if (op.data.status == true) {\n                            dispatch({\n                                'type': 'chat_status_changed',\n                                'data': {text: op.data.ttx}\n                            });\n                        } else {\n                            dispatch({\n                                'type': 'chat_status_changed',\n                                'data': {text: ''}\n                            });\n                        }\n                    } else if (op.op == 'cmsg' || op.op == 'schange') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])){\n                            dispatch(fetchMessages({\n                                'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                'lmgsid' : state.chatwidget.getIn(['chatLiveData','lmsgid']),\n                                'theme' : state.chatwidget.get('theme')\n                            }));\n                        }\n                    } else if (op.op == 'umsg') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])) {\n                            updateMessage({'msg_id' :  op.msid,'id' : state.chatwidget.getIn(['chatData','id']), 'hash' : state.chatwidget.getIn(['chatData','hash'])})(dispatch, getState);\n                        }\n                    } else if (op.op == 'schange' || op.op == 'cclose') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])){\n                            dispatch(checkChatStatus({\n                                'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                'mode' : state.chatwidget.get('mode'),\n                                'theme' : state.chatwidget.get('theme')\n                            }));\n                        }\n                    } else if (op.op == 'vo') {\n                        const state = getState();\n                        if (state.chatwidget.hasIn(['chatData','id'])) {\n                            socket.transmitPublish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+state.chatwidget.getIn(['chatData','id']) : 'chat_'+state.chatwidget.getIn(['chatData','id'])) ,{'op':'vi_online', status: true});\n                        }\n                    }\n                }\n                })();\n            }\n       }\n\n       (async () => {\n            for await (let event of socket.listener('deauthenticate')) {\n                authentificate();\n            }\n       })();\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport { nodeJSChat };"],"names":["nodeJSChat","_nodeJSChat","this","socket","helperFunctions","disconnect","params","dispatch","getState","state","chatId","chatwidget","getIn","syncDefault","socketOptions","protocolVersion","hostname","path","autoReconnectOptions","initialDelay","randomness","port","parseInt","secure","instance_id","socketCluster","require","create","sampleChannel","authentificate","chat_id","window","lhcAxios","post","lhcChat","headers","then","response","Promise","all","invoke","hash","data","chanelName","listener","once","connectVisitor","visitorTypingListener","status","transmitPublish","msg","messageSend","messageSendError","unsubscribe","e","sync_interval","firstRun","subscribe","op","text","ttx","hasIn","fetchMessages","get","updateMessage","msid","checkChatStatus","isAuthenticated"],"sourceRoot":""}